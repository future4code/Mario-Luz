{"version":3,"sources":["components/PostBottom/icones/commenticon.svg","components/PostBottomComment/PostBottomComment.js","components/PostBottom/PostBottom.js","components/Post/Post.js","App.js","serviceWorker.js","index.js","components/PostBottom/icones/favoritewhite.svg","components/PostBottom/icones/favorite.svg"],"names":["module","exports","Comment","styled","p","LikeImg","img","PostBottomComment","props","darLikeComment","state","liked","setState","heartIcon","heartWhite","heartBlack","this","comment","onClick","src","alt","React","Component","PostBottomContainer","section","CommentSection","div","CommentIcon","CommentIconContainer","FormComment","FormCommentInput","input","PostBottom","darLike","counter","favoriteCounter","novoEstado","comentar","form","formComentario","placeholder","onKeyPress","apertouEnter","event","code","which","text","target","value","commentCounter","newComments","comments","push","onDoubleClick","commentIcon","map","element","PostContainer","PostHeader","header","PostAvatar","PostImage","Post","avatar","nome","postImage","FormNewPost","Wrapper","App","onChangeInputNome","valorInputNome","onChangeInputAvatar","valorInputAvatar","onChangeInputPost","valorInputPost","onKeyPressEnter","addPost","newPost","newPostList","postList","posts","className","type","onChange","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.109de986.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/commenticon.de299b47.svg\";","import React from \"react\";\nimport heartWhite from \"./../PostBottom/icones/favoritewhite.svg\";\nimport heartBlack from \"./../PostBottom/icones/favorite.svg\";\nimport styled from \"styled-components\";\nconst Comment = styled.p`\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    width: 100%;\n`\nconst LikeImg = styled.img`\n    margin-left: 5px;\n\n`\nexport class PostBottomComment extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            heartIcon: heartWhite,\n            liked: false\n        };\n    }\n    darLikeComment = () => {\n        if (!this.state.liked) {\n            this.setState({\n                heartIcon: heartBlack,\n                liked: true\n            });\n        } else {\n            this.setState({\n                heartIcon: heartWhite,\n                liked: false\n            });\n        }\n    };\n    render() {\n        return (\n            <Comment>\n                {this.props.comment}\n                <LikeImg\n                    onClick={this.darLikeComment}\n                    src={this.state.heartIcon}\n                    alt=\"\"\n                />\n            </Comment>\n        );\n    }\n}\n\nexport default PostBottomComment;\n","import React from \"react\";\nimport heartWhite from \"./icones/favoritewhite.svg\";\nimport heartBlack from \"./icones/favorite.svg\";\nimport commentIcon from \"./icones/commenticon.svg\";\nimport styled from \"styled-components\";\nimport {PostBottomComment} from './../PostBottomComment/PostBottomComment.js'\n\nconst PostBottomContainer = styled.section`\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    flex-wrap: wrap;\n    padding: 10px;\n`;\nconst CommentSection = styled.div`\n    flex: 1;\n    font-size: 0.9rem;\n    grid-column: 1 / 3;\n`;\nconst CommentIcon = styled.img`\n    width: 24px;\n`;\nconst CommentIconContainer = styled.div`\n    display: flex;\n    justify-content: flex-end;\n`;\nconst FormComment = styled.div`\n    grid-column: 1/3;\n`;\nconst FormCommentInput = styled.input`\n    width: 100%;\n    margin: 10px 0;\n    box-sizing: border-box;\n`;\nclass PostBottom extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            liked: false,\n            heartIcon: heartWhite,\n            favoriteCounter: 0,\n            commentCounter: 0,\n            formComentario: \"\",\n            comments: []\n        };\n    }\n\n    darLike = () => {\n        let counter = this.state.favoriteCounter;\n        if (this.state.liked) {\n            const novoEstado = {\n                liked: false,\n                favoriteCounter: --counter,\n                heartIcon: heartWhite\n            };\n            this.setState(novoEstado);\n        } else {\n            const novoEstado = {\n                liked: true,\n                favoriteCounter: ++counter,\n                heartIcon: heartBlack\n            };\n            this.setState(novoEstado);\n        }\n    };\n\n    comentar = () => {\n        let form = this.state.formComentario;\n        if (!form) {\n            form = (\n                <FormComment>\n                    <FormCommentInput\n                        placeholder=\"Algo a dizer ?\"\n                        onKeyPress={this.apertouEnter}\n                    />\n                </FormComment>\n            );\n            this.setState({\n                formComentario: form\n            });\n        } else {\n            this.setState({\n                formComentario: \"\"\n            });\n        }\n    };\n    apertouEnter = event => {\n        const code = event.which;\n        const text = event.target.value;\n        if (code === 13) {\n            let counter = this.state.commentCounter;\n            let newComments = this.state.comments;\n            newComments.push(text);\n            this.setState({\n                formComentario: \"\",\n                commentCounter: ++counter,\n                comments: newComments\n            });\n        }\n    };\n\n    render() {\n        return (\n            <PostBottomContainer>\n                <div>\n                    <img\n                        onDoubleClick={this.darLike}\n                        src={this.state.heartIcon}\n                        alt=\"\"\n                    />\n                    {this.state.favoriteCounter}\n                </div>\n                <CommentIconContainer>\n                    <CommentIcon\n                        onClick={this.comentar}\n                        src={commentIcon}\n                        alt=\"\"\n                    />\n                    {this.state.commentCounter}\n                </CommentIconContainer>\n                {this.state.formComentario}\n                <CommentSection>\n                    {this.state.comments.map(element => (\n                        <PostBottomComment comment={element}/>\n                    ))}\n                </CommentSection>\n            </PostBottomContainer>\n        );\n    }\n}\n\nexport default PostBottom;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport PostBottom from \"../PostBottom/PostBottom\";\nimport styled from \"styled-components\";\n\nconst PostContainer = styled.section`\n    width: 100%;\n    border: 1px solid black;\n    margin-bottom: 30px;\n`;\n\nconst PostHeader = styled.header`\n    display: flex;\n    padding: 5px 10px;\n`;\nconst PostAvatar = styled.img`\n    max-width: 60px;\n    border-radius: 50%;\n    margin-right: 10px;\n`;\n\nconst PostImage = styled.img`\n    min-width: 100%;\n    max-width: 30%;\n`;\nclass Post extends React.Component {\n    render() {\n        return (\n            <PostContainer>\n                <PostHeader>\n                    <PostAvatar src={this.props.avatar} alt={this.props.nome} />\n                    <h3>{this.props.nome}</h3>\n                </PostHeader>\n                <PostImage src={this.props.postImage} alt=\"\" />\n                <PostBottom />\n            </PostContainer>\n        );\n    }\n}\n\nPost.propTypes = {\n    nome: PropTypes.string.isRequired\n};\nexport { Post };\n","import React from \"react\";\nimport \"./App.css\";\nimport { Post } from \"./components/Post/Post.js\";\nimport styled from \"styled-components\";\n\nconst FormNewPost = styled.section`\n    border: 1px solid black;\n    position: sticky;\n    top: 0;\n    margin-bottom: 10px;\n    display: flex;\n    flex-direction: column;\n    background: white;\n`;\n\nconst Wrapper = styled.div`\n    display: grid;\n    min-width: 414px;\n    width: 30%;\n    margin: 0 auto;\n`;\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            valorInputNome: \"\",\n            valorInputAvatar: \"\",\n            valorInputPost: \"\",\n            postList: []\n        };\n    }\n\n    onChangeInputNome = event => {\n        this.setState({ valorInputNome: event.target.value });\n    };\n    onChangeInputAvatar = event => {\n        this.setState({ valorInputAvatar: event.target.value });\n    };\n    onChangeInputPost = event => {\n        this.setState({ valorInputPost: event.target.value });\n    };\n\n    onKeyPressEnter = event => {\n        const code = event.which;\n        if (code === 13) {\n            this.addPost();\n        }\n    };\n\n    addPost = () => {\n        const newPost = {\n            nome: this.state.valorInputNome,\n            avatar: this.state.valorInputAvatar,\n            postImage: this.state.valorInputPost\n        };\n        const newPostList = [...this.state.postList, newPost];\n        this.setState({\n            postList: newPostList,\n            valorInputAvatar: \"\",\n            valorInputNome: \"\",\n            valorInputPost: \"\",\n            newPost: false\n        });\n    };\n    render() {\n        const posts = this.state.postList.map(element => {\n            return (\n                <Post\n                    nome={element.nome}\n                    avatar={element.avatar}\n                    postImage={element.postImage}\n                />\n            );\n        });\n\n        return (\n            <section className=\"App\">\n                <Wrapper>\n                    <FormNewPost>\n                        <h1>Nova Postagem</h1>\n                        <input\n                            placeholder=\"Nome do usuário\"\n                            type=\"text\"\n                            value={this.state.valorInputNome}\n                            onChange={this.onChangeInputNome}\n                        />\n                        <input\n                            placeholder=\"Imagem do Perfil\"\n                            type=\"url\"\n                            value={this.state.valorInputAvatar}\n                            onChange={this.onChangeInputAvatar}\n                        />\n                        <input\n                            placeholder=\"Imagem Post\"\n                            type=\"url\"\n                            value={this.state.valorInputPost}\n                            onChange={this.onChangeInputPost}\n                            onKeyPress={this.onKeyPressEnter}\n                        />\n                    </FormNewPost>\n                    {posts}\n                </Wrapper>\n            </section>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/favoritewhite.042aa417.svg\";","module.exports = __webpack_public_path__ + \"static/media/favorite.4c67d875.svg\";"],"sourceRoot":""}